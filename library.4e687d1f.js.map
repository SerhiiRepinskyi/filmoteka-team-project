{"mappings":"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","sources":["src/js/library-window-listeners.js","src/js/render-watched.js","src/js/lib-card-markup.js","src/js/render-queue.js","src/js/library_button.js","src/js/modal-card_library.js","src/js/modal-buttons-library.js","src/js/firebase/firebase-auth-library.js"],"sourcesContent":["import onAuth from './onAuth';\nimport { onThemeBtnClick } from './themse-picker';\nwindow.addEventListener('load', onAuth);\ndocument\n  .querySelector('#theme-toggle')\n  .addEventListener('click', onThemeBtnClick);\n","import { DatabaseAPI } from './firebase/database-api';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport { Report } from 'notiflix';\nimport { refs } from './refs';\nimport { renderMarkup } from './lib-card-markup';\n\nexport const service = new DatabaseAPI();\n\nexport async function renderWatchedList() {\n  Loading.pulse({\n    svgColor: '#b92f2c',\n  });\n  try {\n    const listArr = await service.getWatchedList();\n    const markup = renderMarkup(listArr);\n    refs.libGalleryEl.insertAdjacentHTML('beforeend', markup);\n    window.removeEventListener('load', renderWatchedList);\n  } catch (error) {\n    Report.info(\n      'Filmoteka Info',\n      'This List is empty. Start adding some movies to see them here',\n      'OK'\n    );\n  }\n  Loading.remove();\n}\n","import {\n    getGenresLib,\n    getReleaseDate,\n    getMovieTitle,\n    getMoviePoster,\n  } from './markup-func';\n\nexport function renderMarkup(listArr) {\n    return listArr\n      .map(({ id, title, poster_path, release_date, genres }) => {\n        return `<li class='card-item' data-id='${id}'>\n        <div class='image__wrapper'>\n          <img class='movie__poster' src='${getMoviePoster(\n            poster_path\n          )}' width='395' alt='${title}' loading='lazy' />\n        </div>\n        <div class='card-item__info-wrapper'>\n        <h2 class='card-item__title'>${getMovieTitle(title)}</h2>\n        <div class='card-item__info'>\n        <p class='card-item__genre'>${getGenresLib(genres)}</p>\n        <span class='card-item__year'>|</span>\n        <p class='card-item__year'>${getReleaseDate(release_date)}</p>\n        </div>\n        </div>\n        </li>`;\n      })\n      .join('');\n  }","import { renderMarkup } from './lib-card-markup';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport { refs } from './refs';\nimport { service } from './render-watched';\nimport { Report } from 'notiflix';\n\nexport async function renderQueueList() {\n  Loading.pulse({\n    svgColor: '#b92f2c',\n  });\n  try {\n    const listArr = await service.getQueueList();\n    const markup = renderMarkup(listArr);\n    refs.libGalleryEl.insertAdjacentHTML('beforeend', markup);\n  } catch (error) {\n    Report.info(\n      'Filmoteka Info',\n      'This List is empty. Start adding some movies to see them here',\n      'OK'\n    );\n  }\n  Loading.remove();\n}\n","import { renderWatchedList } from './render-watched';\nimport { renderQueueList } from './render-queue';\nimport {refs} from './refs';\n\nfunction handleButtonClick(event) {\n  const clickedButton = event.target;\n  if (clickedButton === refs.buttonWatchedEl) {\n    refs.libGalleryEl.innerHTML = '';\n    renderWatchedList();\n    if (!refs.buttonWatchedEl.classList.contains('lib--active')) {\n      refs.buttonWatchedEl.classList.add('lib--active');\n      refs.buttonQueueEl.classList.remove('lib--active');\n    }\n  } else if (clickedButton === refs.buttonQueueEl) {\n    refs.libGalleryEl.innerHTML = '';\n    renderQueueList();\n    if (!refs.buttonQueueEl.classList.contains('lib--active')) {\n      refs.buttonWatchedEl.classList.remove('lib--active');\n      refs.buttonQueueEl.classList.add('lib--active');\n    }\n  }\n}\n\nrefs.buttonWatchedEl.addEventListener('click', handleButtonClick);\nrefs.buttonQueueEl.addEventListener('click', handleButtonClick);\nwindow.addEventListener('load', renderWatchedList);\n","import { FilmAPI } from './api';\nimport fetchModalCard from './modal-card_render';\n\nconst modalCardBackdrop = document.querySelector('.modal-card__backdrop');\nconst galeryList = document.querySelector('.library-cards__list');\nconst body = document.querySelector('body');\nconst modalCard = document.querySelector('.modal-card');\n\nconst btnCloseModalEl = document.querySelector('.modal-card__close-btn');\nconst modalCardAPI = new FilmAPI();\ngaleryList.addEventListener('click', getMovieObjOnClick);\n\nasync function getMovieObjOnClick(evt) {\n  console.log(evt.target.closest('.cart-items'));\n  modalCardAPI.youTubeID = evt.target.closest('.card-item').dataset.id;\n  localStorage.setItem(\n    'LOCALSTORAGE_KEY',\n    `${evt.target.closest('.card-item').dataset.id}`\n  );\n  if (!evt.target.closest('.card-item')) {\n    return;\n  }\n  let liId = evt.target.closest('.card-item').dataset.id;\n  const movieObj = await modalCardAPI.fetchDetails(liId);\n  fetchModalCard(movieObj);\n  body.classList.add('no-scroll');\n  modalCardBackdrop.classList.remove('hidden');\n}\n\nwindow.addEventListener('keydown', handleEscKeyDown);\n\nfunction handleEscKeyDown(event) {\n  if (event.code === 'Escape') {\n    body.classList.remove('no-scroll');\n    modalCardBackdrop.classList.add('hidden');\n  }\n}\nbtnCloseModalEl.addEventListener('click', evt => {\n  body.classList.remove('no-scroll');\n  modalCardBackdrop.classList.add('hidden');\n});\n\nmodalCardBackdrop.addEventListener('click', e => {\n  if (e.target === modalCardBackdrop) {\n    modalCardBackdrop.classList.add('hidden');\n    body.classList.remove('no-scroll');\n  }\n});\n","import { DatabaseAPI } from './firebase/database-api';\nimport { FilmAPI } from './api';\nimport { Notify } from 'notiflix';\n\nconst filmAPI = new FilmAPI();\nconst databaseAPI = new DatabaseAPI();\n\nconst galeryList = document.querySelector('.library-cards__list');\nconst modalCard = document.querySelector('.modal-card');\nlet movieId = '';\n\nconst switchWatchedBtnToRemove = () => {\n  setTimeout(() => {\n    const watchedBtn = document.querySelector('[data-card-modal-watched-film]');\n    watchedBtn.classList.remove('add-to-watched');\n    watchedBtn.classList.add('remove-from-watched');\n    watchedBtn.textContent = 'Remove from watched';\n  }, 150);\n};\n\nconst switchQueueButtonToRemove = () => {\n  setTimeout(() => {\n    const queueBtn = document.querySelector('[data-card-modal-queue-film]');\n    queueBtn.classList.remove('add-to-queue');\n    queueBtn.classList.add('remove-from-queue');\n    queueBtn.textContent = 'Remove from queue';\n  }, 150);\n};\n\nconst switchWatchedBtnToAdd = () => {\n  setTimeout(() => {\n    const watchedBtn = document.querySelector('[data-card-modal-watched-film]');\n    watchedBtn.classList.remove('remove-from-watched');\n    watchedBtn.classList.add('add-to-watched');\n    watchedBtn.textContent = 'Add to watched';\n  }, 150);\n};\n\nconst switchQueueButtonToAdd = () => {\n  setTimeout(() => {\n    const queueBtn = document.querySelector('[data-card-modal-queue-film]');\n    queueBtn.classList.remove('remove-from-queue');\n    queueBtn.classList.add('add-to-queue');\n    queueBtn.textContent = 'Add to queue';\n  }, 150);\n};\n\nexport const checkList = async e => {\n  if (!e.target.closest('.card-item')) {\n    return;\n  }\n\n  try {\n    movieId = Number(e.target.closest('.card-item').dataset.id);\n    const presentInWatched = await databaseAPI.checkPresenseInWatched(movieId);\n    if (presentInWatched) {\n      switchWatchedBtnToRemove();\n    } else if (!presentInWatched) {\n      switchWatchedBtnToAdd();\n    }\n    const presentInQueue = await databaseAPI.checkPresenseInQueue(movieId);\n    if (presentInQueue) {\n      switchQueueButtonToRemove();\n    } else if (!presentInQueue) {\n      switchQueueButtonToAdd();\n    }\n  } catch (error) {\n    Notify.failure('Ooops! Something went wrong. Try reloading page');\n  }\n};\n\nexport const addMovies = async e => {\n  if ('cardModalWatchedFilm' in e.target.dataset) {\n    try {\n      if (e.target.classList.contains('add-to-watched')) {\n        const movieObj = await filmAPI.fetchDetails(movieId);\n        await databaseAPI.addToWatched(movieObj);\n        Notify.success(`${movieObj.title} added to Watched List`);\n        switchWatchedBtnToRemove();\n        const presentInQueue = await databaseAPI.checkPresenseInQueue(movieId);\n        if (presentInQueue) {\n          switchQueueButtonToAdd();\n          await databaseAPI.removeMovieFromQueue(movieId);\n          Notify.success(`${movieObj.title} removed from Queue List`);\n        }\n      }\n    } catch (error) {\n      Notify.failure('Ooops! Something went wrong. Try reloading page');\n    }\n  } else if ('cardModalQueueFilm' in e.target.dataset) {\n    try {\n      if (e.target.classList.contains('add-to-queue')) {\n        const movieObj = await filmAPI.fetchDetails(movieId);\n        await databaseAPI.addToQueue(movieObj);\n        Notify.success(`${movieObj.title} added to Queue List`);\n        switchQueueButtonToRemove();\n        const presentInWatched = await databaseAPI.checkPresenseInWatched(\n          movieId\n        );\n        if (presentInWatched) {\n          switchWatchedBtnToAdd();\n          await databaseAPI.removeMovieFromWatched(movieId);\n          Notify.success(`${movieObj.title} removed from Watched List`);\n        }\n      }\n    } catch (error) {\n      Notify.failure('Ooops! Something went wrong. Try reloading page');\n    }\n  }\n};\n\nexport const removeMovies = async e => {\n  try {\n    if ('cardModalWatchedFilm' in e.target.dataset) {\n      if (e.target.classList.contains('remove-from-watched')) {\n        await databaseAPI.removeMovieFromWatched(movieId);\n        Notify.success(`Movie removed from Watched List`);\n\n        switchWatchedBtnToAdd();\n      }\n    } else if ('cardModalQueueFilm' in e.target.dataset) {\n      if (e.target.classList.contains('remove-from-queue')) {\n        await databaseAPI.removeMovieFromQueue(movieId);\n        Notify.success(`Movie removed from Queue List`);\n\n        switchQueueButtonToAdd();\n      }\n    }\n  } catch (error) {\n    console.log(error);\n    Notify.failure('Ooops! Something went wrong. Try reloading page');\n  }\n};\n\ngaleryList.addEventListener('click', checkList);\nmodalCard.addEventListener('click', addMovies);\nmodalCard.addEventListener('click', removeMovies);\n","import { firebaseApp } from './firebase-init';\nimport { getAuth, onAuthStateChanged, signOut } from 'firebase/auth';\nimport { refs } from './auth-modal-refs';\nimport { Notify } from 'notiflix';\n\nconst auth = getAuth(firebaseApp);\n\nconst monitorAuthState = async () => {\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      refs.openModalLibraryBtn.classList.add('log-out');\n      refs.openModalLibraryBtn.setAttribute('title', 'Click to Log Out');\n      refs.openModalLibraryBtn.classList.remove('log-in');\n    } else {\n      refs.openModalLibraryBtn.classList.remove('log-out');\n      refs.openModalLibraryBtn.setAttribute('title', 'Click to Log In');\n      refs.openModalLibraryBtn.classList.add('log-in');\n    }\n  });\n};\nmonitorAuthState();\n\nconst logout = async e => {\n  if (!e.target.classList.contains('log-out')) {\n    return;\n  }\n  await signOut(auth);\n  Notify.success('You are loged out. See you soon');\n\n  setTimeout(() => window.location.replace('./index.html'), 2000);\n};\n\nrefs.openModalLibraryBtn.addEventListener('click', logout);\n"],"names":["$8j3eh","parcelRequire","window","addEventListener","default","document","querySelector","$ayzP0","onThemeBtnClick","$4O2bx","$eVEnd","$a8fb871f337d10a4$export$add40575555c273c","listArr","map","id","title","poster_path","release_date","genres","getMoviePoster","getMovieTitle","getGenresLib","getReleaseDate","join","$0b5f6a1499574303$export$6ed414b8d8bead88","DatabaseAPI","async","$0b5f6a1499574303$export$8243be6ab7611de2","$dSs1Y","Loading","pulse","svgColor","markup","getWatchedList","$krGWQ","refs","libGalleryEl","insertAdjacentHTML","removeEventListener","error","$7Y9D8","Report","info","remove","$6f51af6bca2687d5$export$69bf332fc394edc5","getQueueList","$0a9b4fa6ebff9285$var$handleButtonClick","event","clickedButton","target","buttonWatchedEl","innerHTML","classList","contains","add","buttonQueueEl","$7rYDH","$dce9346a2fde36a8$var$modalCardBackdrop","$dce9346a2fde36a8$var$galeryList","$dce9346a2fde36a8$var$body","$dce9346a2fde36a8$var$btnCloseModalEl","$dce9346a2fde36a8$var$modalCardAPI","FilmAPI","evt","console","log","closest","youTubeID","dataset","localStorage","setItem","liId","movieObj","fetchDetails","$bQoWw","code","e","$a3d8058a7f12dc2f$var$filmAPI","$a3d8058a7f12dc2f$var$databaseAPI","$a3d8058a7f12dc2f$var$galeryList","$a3d8058a7f12dc2f$var$modalCard","$a3d8058a7f12dc2f$var$movieId","$a3d8058a7f12dc2f$var$switchWatchedBtnToRemove","setTimeout","watchedBtn","textContent","$a3d8058a7f12dc2f$var$switchQueueButtonToRemove","queueBtn","$a3d8058a7f12dc2f$var$switchWatchedBtnToAdd","$a3d8058a7f12dc2f$var$switchQueueButtonToAdd","Number","presentInWatched","checkPresenseInWatched","presentInQueue","checkPresenseInQueue","Notify","failure","addToWatched","success","removeMovieFromQueue","addToQueue","removeMovieFromWatched","error1","$bcNH0","$d6814f0e564c1480$var$auth","$eyjy7","getAuth","firebaseApp","onAuthStateChanged","user","$5Zbuc","openModalLibraryBtn","setAttribute","$d6814f0e564c1480$var$monitorAuthState","signOut","location","replace"],"version":3,"file":"library.4e687d1f.js.map"}